fac_1
student_2 <- c(4, 5, 7, 8, 10, 1, 3)
fac_2 <- factor(student_2,
levels = c(1, 3, 4, 5, 7, 8, 10),
labels = c("Sup", "Sup", "Sup", "Apro", "Nota", "Exc", "MH"))
fac_2
genero <- c("Masc", "Masc", "Fem", "Masc", "Fem")
factor_genero <- factor(genero)
factor_genero
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des <- factor(desempenyo_laboral,
levels = c("Bajo", "Medio", "Alto"),
oordered = TRUE)
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des <- factor(desempenyo_laboral,
levels = c("Bajo", "Medio", "Alto"),
oordered = TRUE)
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des <- factor(desempenyo_laboral,
levels = c("Bajo", "Medio", "Alto"),
oordered = TRUE)
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des <- factor(desempenyo_laboral,
levels = c("Bajo", "Medio", "Alto"),
ordered = TRUE)
factor_des
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des <- factor(desempenyo_laboral)
factor_des
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des_1 <- factor(desempenyo_laboral,
levels = c("Bajo", "Medio", "Alto"),
ordered = TRUE)
factor_des_1
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des_2 <- factor(desempenyo_laboral)
factor_des_2
factor_des_1[1]
factor_des_1[1] < factor_des_1[3]
factor_des_1[1] > factor_des_1[3]
factor_des_1[1] < factor_des_1[3]
factor_des_1[1] # podemos extraer el primer valor o resultado de nuestro factor
factor_des_1[2]
factor_des_1[3]
factor_des_1[1] > factor_des_1[3] # evalua Alto > Bajo
# para analizar los niveles
levels(factor_des_1)
is.ordered(factor_des_1)
is.ordered(factor_genero)
is.factor(factor_genero) # evalua si el objeto es un factor o no
# también podemos transformar en factores
fac_3 <- as.factor(factor_des_1)
fac_3
# Taquilla de Star Wars: En Millones de dólares (USD)!
# Primer elemento taquilla en EEUU, segundo taquilla fuera de EEUU.
new_hope <- c(460.998, 314.400)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.800)
# Crear una matriz
star_wars_matriz <- matrix(
c(new_hope, empire_strikes, return_jedi),
byrow = TRUE,
nrow = 3
)
star_wars_matriz+
# Taquilla de Star Wars: En Millones de dólares (USD)!
# Primer elemento taquilla en EEUU, segundo taquilla fuera de EEUU.
new_hope <- c(460.998, 314.400)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.800)
# Crear una matriz
star_wars_matriz <- matrix(
c(new_hope, empire_strikes, return_jedi),
byrow = TRUE,
nrow = 3
)
star_wars_matriz
# Como evaluamos una matriz
is.matrix(star_wars_matriz)
typeof(star_wars_matriz)
# Creamos el encabezado, creamos primero los vectores
peliculas <- c("New Hope",
"Empire Strikes",
"Return Jedi")
# Para los paises EEUU y no-EEUU
country <- c("USA",
"no-USA") # declaramos un vector o array
# Asignamos a las filas el vector pelicula y las columnas el vector country
rownames(star_wars_matriz) <- peliculas
colnames(star_wars_matriz) <- country
star_wars_matriz
# Sumamos las taquillas por fila
vec_suma_fila <-  rowSums(star_wars_matriz)
vec_suma_fila
# Sumamos las taquillas por fila
vec_suma_fila <-  rowSums(star_wars_matriz) # suma por fila
vec_suma_fila
# sumamos por columna sería colSums(
vec_suma_columna <- colSums(star_wars_matriz)
vec_suma_columna
)
# Sumamos las taquillas por fila
vec_suma_fila <-  rowSums(star_wars_matriz) # suma por fila
vec_suma_fila
# sumamos por columna sería colSums(
vec_suma_columna <- colSums(star_wars_matriz)
vec_suma_columna
# suma de las taquillas globales
taquilla_global <- colSums(
star_wars_matriz
)
taquilla_global
# suma de las taquillas globales
taquilla_global <- colSums(
star_wars_matriz
)
taquilla_global[1]
# suma de las taquillas globales
taquilla_global <- colSums(
star_wars_matriz
)
taquilla_global[1]
taquilla_global[2]
# suma de las taquillas globales
taquilla_global <- colSums(
star_wars_matriz
)
taquilla_global[1]
taquilla_global[2]
taquilla_global[1] + taquilla_global[2] # suma de las dos
# Creamos una nueva matriz
taquillas2 <- c(474.5, 552.5, 310.7, 338.7, 380.3, 468.5)
nombres2 <- c("The Phantom Menace", "Attack of the Clones", "Revenge of the Sith")
# creamos la matriz
star_wars_matriz_2 <- matrix(
taquillas2,
nrow = 3,
byrow = TRUE,
dimnames = list(
nombres2,
country) # country es igual a c("US", "no-US")
)
star_wars_matriz_2
# combinación de matrices
todo_star_wars <- rbind(star_wars_matriz,
star_wars_matriz_2) # realizamos un append por fila de las dos matrices
todo_star_wars
t(star_wars_matriz)
transp_mat_1 <- t(star_wars_matriz)
transp_mat_1
transp_mat_2 <- t(star_wars_matriz_2)
transp_mat_2
# combinación de matrices por columna
todo_star_wars_2 <- cbind(transp_mat_1,
transp_mat_2) # realizamos un append por fila de las dos matrices
todo_star_wars_2
# total de las taquillas de US y noUS
total_taquillas_region <- colSums(todo_star_wars)
total_taquillas_region
# Promedio no-US
promedio_noUS <- mean(todo_star_wars[,2])
promedio_noUS
# Promedio US
promedio_US <- mean(todo_star_wars[,1])
promedio_US
# Promedio de las 3 primeras peliculas US
promedio_3_US <- mean(todo_star_wars[1:3,1])
promedio_3_US
# Buscamos el max de las taquillas de no-US
max_taquillas_noUS <- max(todo_star_wars[,2])
max_taquillas_noUS
# Buscamos el promedio de no-US pero de forma alterna
promedio_alterno_noUS <- mean(todo_star_wars[c(1,3,5),2]) # recordad que el índice y posición en R empieza por 1
promedio_alterno_noUS
# Buscamos los resultados de la segunda fila, segunda columna
todo_star_wars[2,2]
# Buscamos los resultados de la segunda columna
todo_star_wars[,2]
# Buscamos los resultados de la cuarta fila
todo_star_wars[4,]
# Buscamos el min de la quinta fila
min(todo_star_wars[5,])
# Desviación estandar de la segunda columna
sd(todo_star_wars[,2])
# eje x, eje y
y = c(33,66,65,0,59,60,62,64,70,76,80,69,80,83,68,79,61,53,50,49,53,48,45,39)
x = list(range(length(y)))
plot(x,y)
x = c(range(length(y)))
plot(x,y)
x = c(range(y))
x = c(range(1:length(y)))
x = range(1, length(y))
x = seq(1:length(y))
plot(x,y)
plot(x,y,
type="l")
plot(x,y,
type="l",
main="Tempera")
plot(x,y,
type="l",
main="Temperaturas de nuestro servidor a lo largo del día",
ylabel="Temp. ºC",
xlabel="horas")
plot(x,y,
type="l",
main="Temperaturas de nuestro servidor a lo largo del día",
ylab="Temp. ºC",
xlab="horas")
plot(x,y,
type="l",
main="Temperaturas de nuestro servidor a lo largo del día",
ylab="Temp. ºC",
xlab="horas",
col="dark red")
library(ggplot2)
library(dplyr)
# Cargamos el dataset
data_titanic <- read.csv(file = "../NEOLAND_professor-BAK/bootcamp_DS_201920_NEOLAND/04-R_STUDIO/R_notebook/data/titanic.csv", stringsAsFactors = F)
library(ggplot2)
library(dplyr)
# Cargamos el dataset
data_titanic <- read.csv(file = "../NEOLAND_professor-BAK/bootcamp_DS_201920_NEOLAND/04-R_STUDIO/R_notebook/data/titanic.csv", stringsAsFactors = F)
# Cargamos el dataset
url <- "https://raw.githubusercontent.com/marcusRB/02_Mod_R_Studio_FEVAL/main/99_data/titanic.csv"
df_titanic <- read.csv(file = url, stringsAsFactors = F)
# mostramos los resultados
head(df_titanic)
tail(df_titanic)
dim(df_titanic) # observamos las dimensiones del dataset
# check del tipo de valores
typeof(df_titanic)
# evaluar si es un dataframe
is.data.frame(df_titanic)
# extraemos la estructura del dataset
str(df_titanic)
# realizamos el check de los valores vacios
is.na(df_titanic$Pclass[1:10])
# colSums con is.na()
colSums(is.na(df_titanic)) # realiza la sumatoria de los valores na de cada atributo
# Realizamos una comprobación de los valores numéricos
summary(df_titanic)
# Creamos una tabla de frecuencias: absoluta
table(df_titanic$Age) # var numér
table(df_titanic$Embarked) # var. cat.
table(df_titanic$Pclass)
# sumamos los valores que son vacios
colSums(df_titanic == "") # realizamos el check solo de los valores VACÍOS
colSums(df_titanic == "", na.rm = T) # también podemos realizar la misma operación eliminando los NA's
# los valores representados en una tabla de frecuencia relativa
prop.table(table(df_titanic$Embarked)) # prop.table() me permite visualizar la tabla con valores relativos
# con la opción round() realizamos el redondeo de estos valores
round(prop.table(table(df_titanic$Embarked)), 3) # y dejamos solo 3 decimales
# Realizamos antes de reemplazar valores una copia de backup
df_bak <- df_titanic
# imputamos las observaciones de Embarked con el valor frecuente S
df_titanic$Embarked[df_titanic$Embarked == ""] = "S"
# comprobamos los resultados
round(prop.table(table(df_titanic$Embarked)), 3)
prop.table(table(df_titanic$Cabin))[1] # observamos solo el primer elemento
# Imputamos por el mean
# attach(df_titanic)
mean(df_titanic$Age) # si el resultado es NA, debemos eliminar temporalmente los NA's
# Forzamos con el parámetro na.rm
mean(df_titanic$Age, na.rm = T)
# redondeo al "suelo"
floor(mean(df_titanic$Age, na.rm = T))
# redondeo al "techo"
ceiling(mean(df_titanic$Age, na.rm = T))
media_Age <- ceiling(mean(df_titanic$Age, na.rm = T)) # guardamos la variable Media
media_Age
# check de la variable Age
summary(df_titanic$Age)
# visualizamos Age
hist(df_titanic$Age)
#detach(df_titanic)
# operación de imputación
df_titanic$Age[df_titanic$Age == "NA"] = media_Age # ¿funcionará?
# comprobamos
summary(df_titanic$Age)
# La forma correcta de imputación
df_titanic$Age[is.na(df_titanic$Age)] = media_Age
summary(df_titanic$Age)
# observamos los resultados
hist(df_titanic$Age)
# observamos los valores únicos de los atributos
attach(df_titanic)
apply(df_titanic, MARGIN = 2, FUN = function(i) length (unique(i)))
# Realizamos la transformación a factores de los atributos de forma manual
#Survived <- as.factor(Survived)
#Pclass <- as.factor(Pclass)
#Sex <- as.factor(Sex)
#Embarked <- as.factor(Embarked)
cols <- c("Survived", "Pclass",
"Sex", "Embarked")
for (i in cols){
df_titanic[,i] = as.factor(df_titanic[,i])
}
detach(df_titanic)
str(df_titanic)
# visualizamos la relación de las vars "Sex" y "Survived"
dim(df_titanic)[1]
# guardamos el valor de las filas
filas <- dim(df_titanic)[1]
# visualizamos con la discretización del género según variable dependiente o var target `Survived`
ggplot(data= df_titanic[1:filas,],
aes(
x = Sex,
fill = Survived
)
) + geom_bar()
# visualizamos la relación de las vars "Sex" y "Survived"
dim(df_bak)[1]
# guardamos el valor de las filas
filas <- dim(df_bak)[1]
# visualizamos con la discretización del género según variable dependiente o var target `Survived`
ggplot(data= df_bak[1:filas,],
aes(
x = Sex,
fill = Survived
)
) + geom_bar()
# Visualizamos sin discretizar
ggplot(data=df_bak[1:filas,],
aes(
x = Sex,
fill = Survived
)
) + geom_bar()
# Visualizamos
ggplot(data=df_titanic[1:filas,],
aes(
x = Sex,
fill = Pclass
)
) + geom_bar()
# visualizamos la frecuencia de Survived y Embarked con la discretización
ggplot(
data = df_titanic[1:filas, ],
aes(
x = Embarked,
fill = Survived
)
) + geom_bar(position = "fill")+ylab("Frecuencia")
# visualizamos la frecuencia de Survived y Embarked sin la discretización
ggplot(
data = df_bak[1:filas, ],
aes(
x = Embarked,
fill = Survived
)
) + geom_bar(position = "fill")+ylab("Frecuencia")
# Creamos un gráfico combinado con frecuencias relativas
t <- table(df_titanic[1:filas, ]$Embarked,
df_titanic[1:filas, ]$Survived)
t # devuelve una tabla con valores absolutos
dim(t)
dim(t)
for (i in 1:dim(t)[1]){
t[i,] <- t[i,] / sum(t[i, ]) * 100
}
t
ggplot(data = df_titanic[1:filas,],
aex(x = Embarked,
fill=Survived)
) + geom_bar(position='fill') + ylab("Frecuencia")+facet_wrap(~Sex)
ggplot(data = df_titanic[1:filas,],
aes(x = Embarked,
fill=Survived)
) + geom_bar(position='fill') + ylab("Frecuencia")+facet_wrap(~Sex)
# Cargamos el dataset
url <- "https://raw.githubusercontent.com/marcusRB/02_Mod_R_Studio_FEVAL/main/99_data/titanic.csv"
df_titanic <- read.csv(file = url, stringsAsFactors = F)
# mostramos los resultados
head(df_titanic)
tail(df_titanic)
# Cargamos el juego de datos
datosAdult <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data',stringsAsFactors = FALSE, header = FALSE)
# Nombres de los atributos
names(datosAdult) <- c("age","workclass","fnlwgt","education","education-num","marital-status","occupation","relationship","race","sex","capital-gain","capital-loss","hour-per-week","native-country","income")
unique(datosAdult$education)
unique(datosAdult$education-num)
unique(datosAdult$`education-num`)
knitr::opts_chunk$set(echo = TRUE)
nba<-read.csv("../../02_PROGRAMA_R_STUDIO/99_data/NBA_player_of_the_week.csv",header = TRUE)
nba
nba<-read.csv("../../02_PROGRAMA_R_STUDIO/99_data/NBA_player_of_the_week.csv",header = TRUE)
nba
class(nba)
str(nba)
head(nba)
ls(nba)
names(nba)
row.names(nba)
View(nba)
View(nba)
levels(nba$Conference)
conf<-(nba$Conference)
conf
conf[conf == ""] <- NA
levels(conf)
conf[conf == ""] <- NA
levels(conf)
str(conf)
# Realizamos una copia de backup
nba_bak <- nba
nba$Conference[nba$Conference == ""] <- NA
levels(nba$Conference)
str(nba$Conference)
summary(nba$Conference)
conference <- (nba$Conference)
summary(conference)
summary(is.na(conference == TRUE))
# creamos la variable height
height <- (nba$Height)
# creamos la variable player
player <- (nba$Player)
# creamos la variable pos
pos <- (nba$Position)
# creamos la variable season
season <- (nba$Season)
# creamos la variable team
team <- (nba$Team)
#creamos la variable weight
weight <- (nba$Weight)
table(height[height == "" || NA]) # me devolverá una tabla con los valores ceros si no encuentra vacios o NA
summary(height[height == "" || NA]) # me devolverá una tabla con los valores ceros si no encuentra vacios y una del total de NA's
player[player == ""]
pos[pos == ""]
season[season == ""]
team[team == ""]
weight[weight == ""]
table(c(height,player,pos,season,team,weight) != "")
summary(c(height,player,pos,season,team,weight) != "")
table(ifelse(c(height,player,pos,season,team,weight) != "","Bien! no hay campos vacios","Hay valores vacios"))
draftYear <- (nba$Draft.Year)
head(draftYear)
shortSeason <-(nba$Season.short)
head(shortSeason)
# creamos un df con los valores player, draftYear, shortSeason y Season
draftPlayer <- data.frame(player,pos,draftYear,shortSeason, season, conference)
#comprobamos la estructura
head(draftPlayer)
# creamos la variable calcYears como la diferencia entre el año de la shortSeason y draftYear
calcYears <- (shortSeason - draftYear)
draftPlayer <- cbind(draftPlayer, calcYears, conference)
head(draftPlayer)
ordenado <- order(draftPlayer$calcYears, decreasing = FALSE)
draftPlayer_ordered <- draftPlayer[ordenado,]
head(draftPlayer_ordered)
ordenado <- order(draftPlayer$calcYears, decreasing = TRUE)
draftPlayer_ordered <- draftPlayer[ordenado,]
head(draftPlayer_ordered)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# con el df anterior calculamos la moda
getmode(draftPlayer_ordered$calcYears) # el anio mas repetido es 7
# con summary podemos también extraer más datos,  el minimo y maximo, asi mediana, y quartiles, ya que lo estamos aplicado a valores numéricos a diferencia de valores con clase del tipo chars, cuando obtendríamos un resumen descriptivo.
summary(draftPlayer_ordered$calcYears)
# Visualizamos con table() el resumen de los anios desde el draft al anio que ha pasado a ser player of the week
table(draftPlayer_ordered$calcYears)
# Visualizamos con table() el resumen de los anios desde el draft al anio que ha pasado a ser pla(yer of the week
max(table(draftPlayer_ordered$calcYears))
# Visualizamos con table() el resumen de los anios desde el draft al anio que ha pasado a ser pla(yer of the week
pos(max(table(draftPlayer_ordered$calcYears)))
# Visualizamos con table() el resumen de los anios desde el draft al anio que ha pasado a ser pla(yer of the week
max(table(draftPlayer_ordered$calcYears))
# comprobamos con head() el formato de la variable height
head(height)
# y con tail() los últimos de la variable height
tail(height)
# nos percatamos que no son valores numéricos, y con summary() podemos corroborar la información
summary(height)
install.packages("tidyverse")
# Primero vamos a contar los valores que incluyen el guión "-" con el package stringr::
table(stringr::str_count(height, pattern = "-"))
height <- stringr::str_replace(height, pattern = "-", ".")
head(height) # comprobamos si están realizados los cambios
x <- convertCM(6.5) # siendo ya numero devuelve la misma clase
convertCM <- function(feet){
ifelse(class(feet) != "character", cm <- floor(feet*30.48),
cm <- floor(type.convert(feet)*30.48))
return(cm)}
x <- convertCM(6.5) # siendo ya numero devuelve la misma clase
x
y <- convertCM("6.5") # esta claro que es una clase tipo cadena de texto y pertanto lo transforma en numerico
class(y)
y
class(y)
# siguiendo la logica comproboramos con nuestro vector height, primer elemento por ejemplo
class(height[1])
heightFt <- convertCM(height[1:1055]) # Investigad correctamente si esto procede...
class(heightFt)
table(heightFt[1:10])
str(heightFt)
heightCm <- as.numeric(stringr::str_replace(height[1056:1145], pattern = "cm", ""))
table(heightCm)
heightPly <- c(heightFt,heightCm)
table(heightPly)
str(heightPly)
ggplot2::ggplot(data= df_titanic[1:filas,],
aes(
x = Sex,
fill = Survived
)
) + geom_bar()
library(ggplot2)
ggplot2::ggplot()
